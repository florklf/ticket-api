var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.32,1,2.094]],["body/controllers/AppController.html",[0,2.063,1,3.272,2,1.631,3,0.419,4,0.368,5,0.368,6,3.34,7,0.586,8,1.494,9,4.867,10,1.774,11,0.031,12,0.85,13,3.993,14,1.182,15,1.619,16,0.53,17,0.586,18,2.936,19,3.34,20,0.419,21,0.098,22,1.774,23,2.909,24,1.182,25,3.993,26,0.024,27,0.024]],["title/modules/AppModule.html",[28,1.216,29,2.094]],["body/modules/AppModule.html",[1,3.019,2,1.64,3,0.298,4,0.261,5,0.261,11,0.031,16,0.623,17,0.416,18,2.943,19,2.372,20,0.298,21,0.069,26,0.019,27,0.019,28,1.511,29,4.039,30,1.26,31,1.783,32,2.372,33,2.372,34,2.372,35,3.24,36,3.24,37,3.24,38,2.943,39,2.128,40,1.503,41,1.503,42,2.836,43,2.343,44,2.343,45,2.836,46,2.372,47,2.836,48,2.836,49,2.836,50,4.014,51,2.836,52,2.372,53,4.014,54,1.838,55,2.836,56,2.836,57,2.836,58,2.836,59,2.066,60,2.372,61,2.836]],["title/injectables/AppService.html",[18,1.713,62,0.524]],["body/injectables/AppService.html",[3,0.442,4,0.388,5,0.388,7,0.618,8,1.545,9,4.96,11,0.03,12,0.896,14,1.246,15,1.674,16,0.442,17,0.618,18,2.767,20,0.442,21,0.103,24,1.246,26,0.025,27,0.025,62,0.846,63,1.585,64,3.521,65,4.21,66,4.21,67,4.21]],["title/controllers/AuthController.html",[0,1.32,68,2.094]],["body/controllers/AuthController.html",[0,1.747,2,1.268,3,0.326,4,0.286,5,0.286,7,0.456,8,1.266,10,1.899,11,0.031,12,0.91,14,1.266,16,0.6,17,0.456,20,0.326,21,0.076,22,1.379,24,1.266,26,0.02,27,0.02,68,2.771,69,2.597,70,4.276,71,1.998,72,3.576,73,3.105,74,3.105,75,3.105,76,1.371,77,1.168,78,0.991,79,5.27,80,3.105,81,3.105,82,3.105,83,2.262,84,3.105,85,2.262,86,3.105,87,2.012,88,3.105,89,3.105,90,2.369,91,2.262,92,2.262,93,1.379,94,1.812,95,0.919,96,3.115,97,3.105,98,3.105,99,2.262,100,3.105,101,3.105,102,3.105,103,3.105,104,3.105,105,3.105,106,3.105,107,3.105]],["title/modules/AuthModule.html",[28,1.216,35,1.886]],["body/modules/AuthModule.html",[2,1.667,3,0.305,4,0.268,5,0.268,11,0.031,16,0.616,17,0.426,20,0.305,21,0.071,26,0.019,27,0.019,28,1.537,30,1.29,31,1.813,35,3.627,38,2.966,39,2.164,40,1.539,41,1.539,43,2.382,44,2.382,46,2.428,68,3.058,90,2.986,91,2.115,108,2.428,109,2.428,110,2.903,111,2.428,112,3.265,113,3.265,114,2.903,115,2.644,116,2.903,117,2.903,118,4.081,119,1.539,120,2.903,121,2.115,122,2.903,123,2.903,124,2.903,125,2.428,126,2.903,127,2.903,128,2.903]],["title/injectables/AuthService.html",[62,0.524,90,1.565]],["body/injectables/AuthService.html",[3,0.289,4,0.254,5,0.254,7,0.404,8,1.163,11,0.031,12,0.975,14,1.163,15,1.763,16,0.525,17,0.404,20,0.289,21,0.067,24,1.357,26,0.019,27,0.019,62,0.637,63,1.037,71,2.246,72,3.287,76,1.47,77,1.252,78,1.062,83,2.006,90,1.903,94,1.607,121,2.006,129,2.303,130,3.93,131,1.903,132,2.753,133,2.421,134,5.658,135,2.753,136,0.975,137,3.93,138,3.93,139,2.753,140,2.675,141,3.93,142,2.675,143,2.753,144,3.287,145,2.084,146,2.753,147,2.753,148,2.006,149,3.287,150,1.903,151,1.46,152,2.753,153,2.294,154,2.753,155,2.753,156,2.303,157,2.303,158,2.753,159,2.006,160,2.753,161,2.303,162,2.753,163,2.753]],["title/classes/CreateEventDto.html",[21,0.079,164,2.094]],["body/classes/CreateEventDto.html",[3,0.302,4,0.265,5,0.265,7,0.422,10,2.387,11,0.031,12,1.143,15,1.788,16,0.535,20,0.302,21,0.099,26,0.019,27,0.019,77,1.282,78,1.355,93,1.277,95,1.199,136,1.245,164,2.626,165,1.524,166,4.663,167,2.094,168,2.148,169,1.962,170,4.494,171,3.041,172,3.925,173,2.404,174,2.874,175,1.862,176,2.874,177,3.419,178,2.874,179,3.613,180,2.874,181,4.262,182,2.404,183,2.874,184,2.874,185,0.998,186,2.626,187,3.389,188,1.862,189,2.626,190,1.678,191,2.404,192,1.862,193,2.404]],["title/classes/CreateUserDto.html",[21,0.079,194,2.094]],["body/classes/CreateUserDto.html",[3,0.306,4,0.269,5,0.269,7,0.428,10,2.399,11,0.031,12,1.149,15,1.882,16,0.496,20,0.306,21,0.1,26,0.019,27,0.019,78,1.297,93,1.294,94,3.357,95,0.862,136,1.149,142,2.76,153,2.76,165,1.545,168,2.169,169,1.981,175,2.651,177,2.98,179,3.322,185,1.012,186,2.651,188,1.888,189,3.064,190,1.701,192,1.888,194,2.651,195,4.683,196,2.122,197,3.444,198,3.444,199,3.954,200,2.437,201,2.437,202,2.437,203,2.913,204,2.437,205,2.437,206,2.437,207,2.437,208,2.437,209,2.437,210,2.437,211,2.437]],["title/controllers/EventController.html",[0,1.32,212,2.094]],["body/controllers/EventController.html",[0,1.345,2,0.885,3,0.227,4,0.2,5,0.2,7,0.318,8,0.974,10,2.126,11,0.031,12,1.019,14,1.417,15,1.616,16,0.529,17,0.318,20,0.227,21,0.053,22,0.962,23,1.577,24,1.417,26,0.016,27,0.016,71,2.45,76,1.427,77,1.215,78,1.031,85,2.902,92,1.577,93,0.962,95,0.641,99,1.577,136,0.947,145,2.991,151,2.359,159,3.673,164,2.884,185,0.752,212,2.133,213,1.811,214,2.753,215,3.722,216,3.292,217,3.292,218,3.331,219,1.811,220,2.165,221,3.396,222,2.165,223,2.165,224,2.753,225,2.165,226,3.292,227,3.331,228,2.753,229,2.165,230,2.165,231,2.884,232,2.753,233,2.165,234,2.753,235,1.811,236,1.577,237,1.811,238,2.112,239,1.811,240,1.811,241,1.811,242,3.292,243,1.811,244,2.165,245,1.811,246,2.165,247,2.165,248,2.753,249,2.165,250,2.165,251,2.165,252,1.811,253,2.165,254,2.165]],["title/modules/EventModule.html",[28,1.216,36,1.886]],["body/modules/EventModule.html",[2,1.958,3,0.387,4,0.339,5,0.339,11,0.031,16,0.56,17,0.541,20,0.387,21,0.09,26,0.023,27,0.023,28,1.805,30,1.636,31,2.129,36,3.567,39,2.541,40,1.952,41,1.952,43,2.798,44,2.149,115,3.106,212,3.454,238,3.395,239,3.079,255,3.079,256,3.079,257,3.079,258,3.682,259,3.682]],["title/injectables/EventService.html",[62,0.524,238,1.713]],["body/injectables/EventService.html",[3,0.229,4,0.201,5,0.201,7,0.32,8,0.98,11,0.031,12,1.076,14,1.422,16,0.42,17,0.32,20,0.229,21,0.053,22,0.969,24,1.422,26,0.016,27,0.016,62,0.537,63,0.821,71,2.454,76,1.621,77,1.381,78,1.171,95,0.646,131,1.057,136,1.203,145,2.997,150,1.604,185,1.39,191,3.347,214,2.769,218,2.769,219,2.769,221,3.112,227,4.394,238,1.755,240,3.736,245,2.769,260,1.825,261,3.311,262,1.825,263,2.164,264,2.182,265,2.182,266,3.311,267,2.182,268,2.182,269,2.182,270,4.002,271,3.311,272,3.255,273,2.182,274,3.736,275,3.311,276,2.182,277,1.825,278,2.182,279,3.347,280,2.412,281,3.347,282,3.347,283,1.589,284,1.825,285,3.347,286,1.825,287,2.182,288,2.182,289,1.825,290,2.182,291,2.182]],["title/modules/GlobalModule.html",[28,1.216,37,1.886]],["body/modules/GlobalModule.html",[3,0.399,4,0.35,5,0.35,11,0.03,16,0.513,17,0.558,20,0.399,21,0.093,26,0.023,27,0.023,28,1.841,30,1.687,31,2.172,37,3.593,39,2.592,40,2.013,41,2.013,43,2.854,44,2.216,115,3.169,263,3.115,292,3.176,293,3.176,294,3.176,295,3.797,296,4.89,297,3.797]],["title/injectables/JwtAuthGuard.html",[62,0.524,298,2.354]],["body/injectables/JwtAuthGuard.html",[3,0.468,4,0.41,5,0.41,11,0.03,16,0.567,17,0.654,20,0.468,21,0.109,26,0.026,27,0.026,62,0.876,63,1.676,119,2.361,298,3.935,299,3.724,300,3.244,301,3.724,302,2.361,303,4.453]],["title/injectables/JwtStrategy.html",[62,0.524,112,1.886]],["body/injectables/JwtStrategy.html",[3,0.375,4,0.329,5,0.329,7,0.525,8,1.391,11,0.031,12,1,14,1.058,16,0.552,17,0.525,20,0.375,21,0.087,24,1.058,26,0.022,27,0.022,62,0.762,63,1.346,71,2.146,76,1.146,77,0.976,78,0.828,83,2.604,112,2.744,119,1.895,125,2.989,131,2.544,136,0.761,157,3.931,302,1.895,304,2.989,305,3.931,306,3.574,307,4.701,308,3.574,309,3.574,310,2.989,311,2.604,312,2.989,313,2.989,314,2.989,315,2.989,316,3.574,317,3.574,318,3.574,319,3.574,320,3.574]],["title/injectables/LocalAuthGuard.html",[62,0.524,87,2.094]],["body/injectables/LocalAuthGuard.html",[3,0.468,4,0.41,5,0.41,11,0.03,16,0.567,17,0.654,20,0.468,21,0.109,26,0.026,27,0.026,62,0.876,63,1.676,87,3.5,119,2.361,300,3.244,301,3.724,302,2.361,321,3.724,322,4.453]],["title/injectables/LocalStrategy.html",[62,0.524,113,1.886]],["body/injectables/LocalStrategy.html",[3,0.33,4,0.289,5,0.289,7,0.461,8,1.275,11,0.031,12,0.917,14,0.929,15,1.838,16,0.556,17,0.461,20,0.33,21,0.077,22,1.394,24,0.929,26,0.02,27,0.02,62,0.698,63,1.182,71,2.01,76,1.381,77,1.176,78,0.998,90,2.776,91,2.287,113,2.515,119,1.664,131,1.52,136,0.917,140,2.871,142,3.09,144,2.625,145,2.284,150,1.52,151,1.664,153,1.832,302,1.664,305,3.603,310,2.625,311,2.287,313,2.625,314,2.625,315,2.625,323,2.625,324,3.139,325,3.139,326,4.308,327,3.139,328,2.625,329,4.308,330,3.139,331,3.139,332,3.139,333,2.034]],["title/classes/PrismaClientExceptionFilter.html",[21,0.079,334,2.354]],["body/classes/PrismaClientExceptionFilter.html",[3,0.193,4,0.17,5,0.17,7,0.27,8,0.86,11,0.031,12,0.945,14,1.208,15,1.513,16,0.378,17,0.27,20,0.378,21,0.045,24,1.315,26,0.014,27,0.014,54,1.193,60,1.54,76,1.309,77,1.115,78,0.946,95,0.545,131,1.407,136,1.004,149,4.407,150,1.742,156,3.414,165,0.976,169,1.407,185,0.64,236,2.974,280,1.342,302,1.54,333,1.193,334,2.62,335,3.058,336,1.193,337,3.596,338,4.344,339,3.596,340,3.596,341,2.904,342,1.842,343,4.082,344,1.842,345,3.596,346,1.54,347,1.54,348,1.54,349,2.904,350,2.904,351,2.904,352,2.904,353,2.904,354,2.904,355,1.842,356,2.904,357,4.72,358,5.394,359,4.941,360,1.842,361,4.082,362,1.842,363,1.842,364,2.904,365,1.842,366,3.596,367,2.904,368,1.842,369,2.904,370,3.596,371,1.842,372,1.842,373,1.842,374,2.904,375,1.842,376,1.842,377,3.596,378,1.842,379,1.842,380,1.842,381,1.842,382,1.842,383,1.842,384,2.904,385,1.842,386,1.842,387,1.842,388,1.842,389,1.54,390,1.342,391,1.842,392,2.904,393,1.842]],["title/injectables/PrismaService.html",[62,0.524,263,1.565]],["body/injectables/PrismaService.html",[3,0.365,4,0.32,5,0.32,7,0.51,8,1.365,11,0.031,12,0.981,14,1.365,16,0.484,17,0.51,20,0.365,21,0.085,26,0.022,27,0.022,62,0.748,63,1.307,71,2.461,76,1.113,77,0.948,78,0.804,95,1.028,136,0.739,151,2.445,168,1.841,263,2.234,302,2.445,394,2.904,395,4.331,396,4.612,397,5.904,398,4.612,399,5.518,400,3.472,401,2.904,402,3.472,403,3.472,404,3.472,405,3.472]],["title/guards/RoleGuard.html",[406,2.354,407,2.354]],["body/guards/RoleGuard.html",[3,0.34,4,0.298,5,0.298,7,0.475,8,1.301,11,0.031,12,0.936,14,0.957,16,0.525,17,0.475,20,0.34,21,0.079,22,1.437,24,1.301,26,0.021,27,0.021,54,2.096,62,0.713,76,1.41,77,1.201,78,1.019,94,2.567,95,0.957,131,1.566,136,0.936,140,1.888,150,2.13,161,2.705,168,1.715,407,3.204,408,3.234,409,2.705,410,5.361,411,3.234,412,5.784,413,3.234,414,4.397,415,5.361,416,3.234,417,3.234,418,4.397,419,4.397,420,3.234,421,3.234,422,3.234,423,3.234,424,3.234,425,3.234]],["title/classes/UpdateEventDto.html",[21,0.079,231,2.094]],["body/classes/UpdateEventDto.html",[3,0.307,4,0.269,5,0.269,7,0.429,10,2.402,11,0.031,12,1.151,15,1.797,16,0.497,20,0.307,21,0.1,26,0.019,27,0.019,77,1.293,78,1.361,93,1.299,95,0.865,136,1.25,165,1.55,167,2.13,168,2.174,169,1.986,170,4.522,171,3.069,172,3.961,173,2.445,175,1.894,177,3.451,179,3.504,181,4.294,182,2.445,185,1.015,186,2.657,187,3.43,188,1.894,189,2.657,190,1.706,192,1.894,193,2.445,231,2.657,289,2.445,426,4.688,427,2.923,428,2.923,429,2.923,430,2.923,431,2.923,432,2.923]],["title/classes/UpdateUserDto.html",[21,0.079,433,2.094]],["body/classes/UpdateUserDto.html",[3,0.298,4,0.261,5,0.261,7,0.416,10,2.375,11,0.031,12,1.138,15,1.869,16,0.489,20,0.298,21,0.098,26,0.019,27,0.019,78,1.393,93,1.26,94,3.331,95,0.839,136,1.138,142,2.719,153,2.719,165,1.503,168,2.128,169,1.944,175,2.601,179,3.597,185,0.985,186,2.601,188,1.838,189,3.019,190,1.655,192,1.838,196,2.066,197,3.394,198,3.394,199,3.357,200,2.372,201,2.372,202,2.372,204,2.372,205,2.372,206,2.372,207,2.372,208,2.372,210,2.372,211,2.372,433,2.601,434,4.642,435,4.014,436,2.836,437,2.836,438,2.372]],["title/controllers/UserController.html",[0,1.32,439,2.094]],["body/controllers/UserController.html",[0,1.345,2,0.885,3,0.227,4,0.2,5,0.2,7,0.318,8,0.974,10,2.126,11,0.031,12,1.019,14,1.417,15,1.616,16,0.529,17,0.318,20,0.227,21,0.053,22,0.962,23,1.577,24,1.417,26,0.016,27,0.016,71,2.45,76,1.427,77,1.215,78,1.031,85,2.902,92,1.577,93,0.962,95,0.641,99,1.577,133,1.929,136,0.947,140,1.264,145,2.991,151,2.359,159,3.673,185,0.752,194,2.884,215,3.722,221,3.396,224,2.753,228,2.753,232,2.753,234,2.753,235,1.811,236,1.577,237,1.811,241,1.811,243,1.811,248,2.753,252,1.811,283,2.902,433,2.884,439,2.133,440,1.811,441,2.753,442,3.292,443,3.292,444,3.331,445,1.811,446,2.165,447,2.165,448,2.165,449,2.165,450,3.292,451,2.165,452,2.165,453,2.165,454,1.811,455,3.292,456,2.165,457,1.811,458,2.165,459,2.165,460,2.165,461,2.165,462,2.165,463,2.165,464,2.165]],["title/modules/UserModule.html",[28,1.216,38,1.713]],["body/modules/UserModule.html",[2,1.958,3,0.387,4,0.339,5,0.339,11,0.031,16,0.56,17,0.541,20,0.387,21,0.09,26,0.023,27,0.023,28,1.805,30,1.636,31,2.129,38,3.24,39,2.541,40,1.952,41,1.952,43,2.798,44,2.149,115,3.106,133,3.102,439,3.454,454,3.079,465,3.079,466,3.079,467,3.079,468,3.682,469,3.682]],["title/injectables/UserService.html",[62,0.524,133,1.565]],["body/injectables/UserService.html",[3,0.219,4,0.192,5,0.192,7,0.306,8,0.947,11,0.031,12,1.057,14,1.393,15,0.669,16,0.458,17,0.306,20,0.219,21,0.051,22,0.926,24,1.393,26,0.015,27,0.015,59,2.331,62,0.519,63,0.785,71,2.433,76,1.593,77,1.357,78,1.151,95,0.617,131,1.01,133,1.549,136,1.189,140,2.548,145,2.961,148,2.331,150,1.549,151,1.696,185,1.352,209,3.255,221,3.05,262,1.744,263,2.114,272,3.18,274,3.65,277,1.744,279,3.255,280,2.331,281,3.255,282,3.255,283,3.888,284,1.744,285,3.255,286,1.744,438,1.744,441,2.676,444,2.676,445,2.676,457,2.676,470,1.744,471,3.199,472,2.085,473,2.085,474,3.199,475,2.085,476,3.199,477,2.085,478,2.085,479,2.085,480,3.892,481,3.199,482,2.085,483,2.085,484,2.085,485,3.892,486,3.199,487,2.085,488,2.085,489,2.085]],["title/coverage.html",[490,3.201]],["body/coverage.html",[0,1.97,1,1.651,5,0.235,6,2.13,11,0.031,18,1.35,21,0.125,26,0.018,27,0.018,62,0.937,64,2.13,68,1.651,69,2.13,87,1.651,90,1.234,96,1.856,112,1.487,113,1.487,129,2.13,133,1.234,136,0.542,164,1.651,166,2.13,167,2.707,185,0.885,194,1.651,195,2.13,196,2.707,212,1.651,213,2.13,231,1.651,238,1.35,260,2.13,263,1.234,298,1.856,299,2.13,300,2.707,304,2.13,321,2.13,323,2.13,333,1.651,334,1.856,335,2.408,336,2.408,389,4.033,390,1.856,394,2.13,406,1.856,407,1.856,409,2.13,426,2.13,433,1.651,434,2.13,439,1.651,440,2.13,470,2.13,490,1.856,491,2.547,492,2.547,493,2.547,494,3.196,495,2.13,496,6.43,497,5.665,498,3.716,499,2.13,500,3.716,501,5.127,502,2.547,503,2.13,504,5.527,505,3.716,506,2.13,507,2.13,508,2.547,509,2.547]],["title/dependencies.html",[31,1.724,510,2.263]],["body/dependencies.html",[11,0.031,17,0.532,21,0.116,26,0.023,27,0.023,31,1.608,52,3.027,54,2.345,93,1.608,95,1.071,119,1.919,121,2.637,148,2.637,190,2.113,311,3.851,312,3.027,328,3.027,511,5.286,512,3.62,513,3.62,514,3.62,515,3.62,516,3.62,517,3.62,518,3.62,519,3.62,520,3.62,521,3.62,522,3.62,523,3.62,524,3.62,525,3.62,526,3.62,527,3.62,528,3.62,529,3.62,530,3.62,531,3.62,532,3.62,533,3.62,534,3.62,535,3.62,536,3.62,537,3.62,538,3.62,539,3.62]],["title/miscellaneous/functions.html",[540,1.434,541,3.246]],["body/miscellaneous/functions.html",[7,0.603,11,0.028,26,0.024,27,0.024,76,1.648,77,1.404,78,1.191,96,3.745,136,0.874,335,2.662,336,3.331,338,4.088,346,3.436,390,3.745,494,2.993,495,4.693,503,3.436,506,3.436,507,4.693,540,2.178,541,3.436,542,4.109,543,4.109,544,3.436,545,3.436,546,4.109,547,4.109,548,4.109,549,4.109]],["title/index.html",[7,0.397,550,2.706,551,2.706]],["body/index.html",[4,0.303,11,0.03,26,0.021,27,0.021,171,2.128,401,2.747,490,2.393,552,3.284,553,3.284,554,4.443,555,3.284,556,3.284,557,3.284,558,3.284,559,3.284,560,3.284,561,5.036,562,3.284,563,3.284,564,3.284,565,3.284,566,5.941,567,3.284,568,3.284,569,5.81,570,3.284,571,3.284,572,4.443,573,3.284,574,3.284,575,3.284,576,3.284,577,4.443,578,4.443,579,3.284,580,3.284,581,3.284,582,4.443,583,4.443,584,3.284,585,3.284,586,3.284,587,3.284,588,3.284,589,2.747,590,3.284,591,3.284,592,3.284,593,3.284,594,3.284,595,3.284,596,3.284,597,3.284,598,3.284,599,3.284,600,2.747,601,3.284,602,3.284,603,3.284,604,3.284,605,3.284,606,3.284,607,2.747]],["title/modules.html",[30,1.952]],["body/modules.html",[11,0.025,26,0.025,27,0.025,29,2.855,30,1.957,35,2.572,36,2.572,37,2.572,38,2.336,589,5.166,608,6.177,609,6.177,610,6.177]],["title/overview.html",[611,3.675]],["body/overview.html",[2,1.178,11,0.03,18,2.493,26,0.019,27,0.019,29,3.99,30,1.281,31,1.804,32,2.412,33,2.412,34,2.412,35,3.594,36,3.258,37,3.258,38,3.04,39,2.153,40,1.529,41,1.529,63,1.086,90,2.777,108,2.412,109,2.412,111,2.412,112,2.744,113,2.744,133,2.777,165,1.529,238,3.04,255,2.412,256,2.412,257,2.412,263,2.777,292,2.412,293,2.412,294,2.412,406,2.101,465,2.412,466,2.412,467,2.412,611,2.412,612,4.062,613,2.884,614,2.884,615,2.884]],["title/properties.html",[169,1.88,510,2.263]],["body/properties.html",[11,0.03,26,0.027,27,0.027,169,2.314,171,3.096,600,3.996,607,3.996,616,4.778,617,4.778,618,4.778]],["title/miscellaneous/typealiases.html",[540,1.434,619,3.882]],["body/miscellaneous/typealiases.html",[7,0.698,11,0.027,26,0.027,27,0.027,136,1.195,272,3.461,335,3.078,336,3.639,338,4.091,540,2.519,545,3.973,620,4.751]],["title/miscellaneous/variables.html",[540,1.434,621,3.246]],["body/miscellaneous/variables.html",[7,0.584,11,0.031,24,1.176,26,0.024,27,0.024,59,2.895,142,2.939,150,2.813,153,2.939,185,1.749,197,3.668,198,4.026,333,2.575,347,4.211,348,4.211,395,3.324,494,2.895,499,4.211,540,2.107,544,4.211,621,3.324,622,3.974,623,3.974,624,3.974,625,3.974]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":617,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":615,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["1.2.2",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["10.0.3",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["16.0.3",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":613,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["4.11.0",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":612,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["6.3.0",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["7.0.0",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["9",{"_index":614,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["access_token",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["aliases",{"_index":620,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":590,"title":{},"body":{"index.html":{}}}],["apiproperty",{"_index":186,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({enum",{"_index":182,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{}}}],["apitags",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('event",{"_index":244,"title":{},"body":{"controllers/EventController.html":{}}}],["apitags('user",{"_index":456,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":401,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":405,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":369,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["app_guard",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicationref",{"_index":345,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["applications",{"_index":560,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":359,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["async",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["auth(...roles",{"_index":546,"title":{},"body":{"miscellaneous/functions.html":{}}}],["auth(role.admin",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(role.admin)@get('profile",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":300,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":68,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":301,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":303,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":322,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":35,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":600,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":90,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":591,"title":{},"body":{"index.html":{}}}],["baseexceptionfilter",{"_index":337,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["bcrypt",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.hash(data.password",{"_index":486,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hashsync('password",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":234,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":418,"title":{},"body":{"guards/RoleGuard.html":{}}}],["bootstrap",{"_index":507,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":610,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":608,"title":{},"body":{"modules.html":{}}}],["building",{"_index":555,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":410,"title":{},"body":{"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":414,"title":{},"body":{"guards/RoleGuard.html":{}}}],["catch",{"_index":339,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["catch(exception",{"_index":356,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["catch(prisma?.prismaclientknownrequesterror",{"_index":372,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["catchclientknownrequesterror",{"_index":340,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["catchclientknownrequesterror(exception",{"_index":362,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["class",{"_index":21,"title":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":165,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eventmodule",{"_index":255,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_exports",{"_index":256,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_providers",{"_index":257,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_globalmodule",{"_index":292,"title":{},"body":{"modules/GlobalModule.html":{},"overview.html":{}}}],["cluster_globalmodule_exports",{"_index":294,"title":{},"body":{"modules/GlobalModule.html":{},"overview.html":{}}}],["cluster_globalmodule_providers",{"_index":293,"title":{},"body":{"modules/GlobalModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":465,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":466,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":467,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["comparesync",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparesync(password",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["compression",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["const",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"guards/RoleGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"guards/RoleGuard.html":{},"injectables/UserService.html":{}}}],["constructor(applicationref",{"_index":342,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["constructor(authservice",{"_index":324,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(prisma",{"_index":262,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":411,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(usersservice",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":417,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.getclass",{"_index":422,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":421,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":424,"title":{},"body":{"guards/RoleGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":490,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createevent",{"_index":214,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["createevent(@body",{"_index":250,"title":{},"body":{"controllers/EventController.html":{}}}],["createevent(data",{"_index":219,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["createeventdto",{"_index":164,"title":{"classes/CreateEventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"controllers/EventController.html":{},"coverage.html":{}}}],["createuser",{"_index":441,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":461,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(data",{"_index":445,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":194,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["cursor",{"_index":282,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["data",{"_index":221,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.password",{"_index":485,"title":{},"body":{"injectables/UserService.html":{}}}],["date",{"_index":170,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{}}}],["decorators/auth.decorator",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["default",{"_index":347,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":235,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":228,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["deleteevent",{"_index":261,"title":{},"body":{"injectables/EventService.html":{}}}],["deleteevent(where",{"_index":266,"title":{},"body":{"injectables/EventService.html":{}}}],["deleteuser",{"_index":471,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(where",{"_index":474,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GlobalModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":171,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":568,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["dto/create",{"_index":241,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["dto/update",{"_index":243,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["e2e",{"_index":579,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":556,"title":{},"body":{"index.html":{}}}],["email",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["enableshutdownhooks",{"_index":396,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":398,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enum",{"_index":192,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{}}}],["enumeventtype",{"_index":181,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{}}}],["enumeventtype})@isenum(enumeventtype",{"_index":431,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["enumeventtype})@isoptional()@isenum(enumeventtype",{"_index":183,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["errorcodesstatusmapping",{"_index":338,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["event",{"_index":240,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["event(eventwhereuniqueinput",{"_index":268,"title":{},"body":{"injectables/EventService.html":{}}}],["event.controller",{"_index":259,"title":{},"body":{"modules/EventModule.html":{}}}],["event.dto",{"_index":242,"title":{},"body":{"controllers/EventController.html":{}}}],["event.dto.ts",{"_index":167,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["event.dto.ts:13",{"_index":429,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["event.dto.ts:15",{"_index":178,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:17",{"_index":428,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["event.dto.ts:19",{"_index":176,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:21",{"_index":427,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["event.dto.ts:23",{"_index":174,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:24",{"_index":430,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["event.dto.ts:26",{"_index":180,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:28",{"_index":432,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["event.dto.ts:31",{"_index":184,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.service",{"_index":239,"title":{},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{}}}],["event/event.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["eventcontroller",{"_index":212,"title":{"controllers/EventController.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"coverage.html":{}}}],["eventmodule",{"_index":36,"title":{"modules/EventModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules.html":{},"overview.html":{}}}],["events",{"_index":245,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["events(params",{"_index":271,"title":{},"body":{"injectables/EventService.html":{}}}],["eventservice",{"_index":238,"title":{"injectables/EventService.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"coverage.html":{},"overview.html":{}}}],["eventwhereuniqueinput",{"_index":270,"title":{},"body":{"injectables/EventService.html":{}}}],["exception",{"_index":361,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.code",{"_index":379,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":336,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["exception.filter.ts:17",{"_index":355,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter.ts:21",{"_index":344,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter.ts:46",{"_index":360,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter.ts:50",{"_index":363,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter.ts:65",{"_index":365,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exceptionshortmessage",{"_index":341,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exceptionshortmessage(message",{"_index":364,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["executioncontext",{"_index":415,"title":{},"body":{"guards/RoleGuard.html":{}}}],["expiresin",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GlobalModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":302,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["faker.internet.email(firstname",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.name.firstname",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.name.lastname",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakeruser",{"_index":499,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":215,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["firstname",{"_index":197,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":554,"title":{},"body":{"index.html":{}}}],["function",{"_index":389,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["functions",{"_index":541,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":224,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["get('profile",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["getevent",{"_index":216,"title":{},"body":{"controllers/EventController.html":{}}}],["getevent(@param('id",{"_index":246,"title":{},"body":{"controllers/EventController.html":{}}}],["getevent(id",{"_index":223,"title":{},"body":{"controllers/EventController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":550,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":442,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param('id",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(id",{"_index":448,"title":{},"body":{"controllers/UserController.html":{}}}],["global",{"_index":296,"title":{},"body":{"modules/GlobalModule.html":{}}}],["global/global.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["globalmodule",{"_index":37,"title":{"modules/GlobalModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GlobalModule.html":{},"modules.html":{},"overview.html":{}}}],["grow",{"_index":586,"title":{},"body":{"index.html":{}}}],["guard",{"_index":406,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":408,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/local",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["hello",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":597,"title":{},"body":{"index.html":{}}}],["host",{"_index":358,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["httpadapter",{"_index":392,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["httpadapterhost",{"_index":370,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["httpexception",{"_index":367,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["https://nestjs.com",{"_index":604,"title":{},"body":{"index.html":{}}}],["httpserver",{"_index":343,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus",{"_index":368,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.bad_request",{"_index":350,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.conflict",{"_index":352,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.not_found",{"_index":354,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["id",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["identifier",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":168,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GlobalModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":399,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":393,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["injectable",{"_index":62,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["installation",{"_index":565,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":567,"title":{},"body":{"index.html":{}}}],["isdate",{"_index":187,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{}}}],["isemail",{"_index":199,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":188,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum(enumeventtype",{"_index":193,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{}}}],["isenum(role",{"_index":210,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty",{"_index":177,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEventDto.html":{}}}],["isoptional",{"_index":179,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@apiproperty({enum",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isdate",{"_index":173,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{}}}],["isoptional()@isemail",{"_index":436,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring",{"_index":175,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@minlength(5",{"_index":437,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":189,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{}}}],["join",{"_index":593,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":298,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":112,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":601,"title":{},"body":{"index.html":{}}}],["key",{"_index":371,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["lastname",{"_index":198,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":607,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":583,"title":{},"body":{"index.html":{}}}],["limit",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["literal",{"_index":272,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":328,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":87,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":113,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["main",{"_index":495,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":366,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["message.substring(message.indexof",{"_index":385,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["metadata",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":208,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(5",{"_index":211,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(5)@isnotempty",{"_index":203,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":540,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":582,"title":{},"body":{"index.html":{}}}],["mode",{"_index":572,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GlobalModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GlobalModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GlobalModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":596,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":602,"title":{},"body":{"index.html":{}}}],["name",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":561,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":606,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/PrismaClientExceptionFilter.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":333,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":553,"title":{},"body":{"index.html":{}}}],["npm",{"_index":566,"title":{},"body":{"index.html":{}}}],["null",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["number",{"_index":280,"title":{},"body":{"injectables/EventService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/UserService.html":{}}}],["number(id",{"_index":248,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["object.assign",{"_index":375,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["object.keys(this.errorcodesstatusmapping).includes(exception.code",{"_index":381,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["onmoduleinit",{"_index":397,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":584,"title":{},"body":{"index.html":{}}}],["optional",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["orderby",{"_index":285,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["out",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GlobalModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":611,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2000",{"_index":349,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2002",{"_index":351,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2025",{"_index":353,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["package",{"_index":510,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":236,"title":{},"body":{"controllers/EventController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":252,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":274,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["passport",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":237,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":232,"title":{},"body":{"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["path",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["payload",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["place",{"_index":172,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{}}}],["please",{"_index":594,"title":{},"body":{"index.html":{}}}],["post",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["prisma",{"_index":185,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prisma.eventcreateinput",{"_index":191,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventService.html":{}}}],["prisma.eventupdateinput",{"_index":289,"title":{},"body":{"injectables/EventService.html":{},"classes/UpdateEventDto.html":{}}}],["prisma.eventwhereuniqueinput",{"_index":227,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":357,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["prisma.service",{"_index":277,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["prisma.stringfieldupdateoperationsinput",{"_index":435,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["prisma.usercreateinput",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":286,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["prisma.userupdateinput",{"_index":438,"title":{},"body":{"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["prisma.userwhereinput",{"_index":284,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":283,"title":{},"body":{"injectables/EventService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["prisma/.../seed.ts",{"_index":544,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/seed.ts",{"_index":494,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":395,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismaclientexceptionfilter",{"_index":334,"title":{"classes/PrismaClientExceptionFilter.html":{}},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["prismaservice",{"_index":263,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["process.env.jwt_secret",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":574,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":552,"title":{},"body":{"index.html":{}}}],["project",{"_index":585,"title":{},"body":{"index.html":{}}}],["promise",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":169,"title":{"properties.html":{}},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"properties.html":{}}}],["provide",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["provideprismaclientexceptionfilter",{"_index":390,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["provideprismaclientexceptionfilter(errorcodesstatusmapping",{"_index":549,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GlobalModule.html":{},"modules/UserModule.html":{}}}],["read",{"_index":595,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/EventController.html":{},"controllers/UserController.html":{}}}],["reflect",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":412,"title":{},"body":{"guards/RoleGuard.html":{}}}],["removeevent",{"_index":217,"title":{},"body":{"controllers/EventController.html":{}}}],["removeevent(data",{"_index":226,"title":{},"body":{"controllers/EventController.html":{}}}],["removeuser",{"_index":443,"title":{},"body":{"controllers/UserController.html":{}}}],["removeuser(data",{"_index":450,"title":{},"body":{"controllers/UserController.html":{}}}],["replace(/\\n/g",{"_index":387,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["repository",{"_index":564,"title":{},"body":{"index.html":{}}}],["req",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["requiredroles",{"_index":419,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requiredroles.some((role",{"_index":425,"title":{},"body":{"guards/RoleGuard.html":{}}}],["reset",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GlobalModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{}}}],["roleguard",{"_index":407,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["roles",{"_index":548,"title":{},"body":{"miscellaneous/functions.html":{}}}],["role})@isenum(role",{"_index":206,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["run",{"_index":569,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":557,"title":{},"body":{"index.html":{}}}],["secret",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":558,"title":{},"body":{"index.html":{}}}],["shortmessage",{"_index":384,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["side",{"_index":559,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["skip",{"_index":279,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GlobalModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":588,"title":{},"body":{"index.html":{}}}],["src/.../auth.decorator.ts",{"_index":542,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":543,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prisma",{"_index":545,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":64,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":503,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/guards/jwt",{"_index":299,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":321,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:15",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:6",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":323,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":327,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:7",{"_index":325,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/guards/role.guard.ts",{"_index":409,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/common/guards/role.guard.ts:6",{"_index":413,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/guards/role.guard.ts:9",{"_index":416,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/event/dto/create",{"_index":166,"title":{},"body":{"classes/CreateEventDto.html":{},"coverage.html":{}}}],["src/event/dto/update",{"_index":426,"title":{},"body":{"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["src/event/event.controller.ts",{"_index":213,"title":{},"body":{"controllers/EventController.html":{},"coverage.html":{}}}],["src/event/event.controller.ts:22",{"_index":225,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:27",{"_index":222,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:32",{"_index":220,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:37",{"_index":233,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:48",{"_index":229,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.module.ts",{"_index":258,"title":{},"body":{"modules/EventModule.html":{}}}],["src/event/event.service.ts",{"_index":260,"title":{},"body":{"injectables/EventService.html":{},"coverage.html":{}}}],["src/event/event.service.ts:17",{"_index":273,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:34",{"_index":265,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:40",{"_index":276,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:51",{"_index":267,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:6",{"_index":264,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:9",{"_index":269,"title":{},"body":{"injectables/EventService.html":{}}}],["src/global/global.module.ts",{"_index":295,"title":{},"body":{"modules/GlobalModule.html":{}}}],["src/main.ts",{"_index":506,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma",{"_index":335,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/prisma.service",{"_index":297,"title":{},"body":{"modules/GlobalModule.html":{}}}],["src/prisma.service.ts",{"_index":394,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:10",{"_index":400,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:6",{"_index":402,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/user/dto/create",{"_index":195,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":434,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":440,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:22",{"_index":449,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:27",{"_index":447,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:32",{"_index":446,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:37",{"_index":453,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:48",{"_index":451,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":468,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":470,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":479,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:18",{"_index":482,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:35",{"_index":473,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:42",{"_index":477,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:56",{"_index":475,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:7",{"_index":472,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":570,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":573,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":575,"title":{},"body":{"index.html":{}}}],["started",{"_index":551,"title":{"index.html":{}},"body":{}}],["starter",{"_index":563,"title":{},"body":{"index.html":{}}}],["statements",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":377,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["stay",{"_index":598,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["substring(shortmessage.indexof('\\n",{"_index":386,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["super",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(applicationref",{"_index":373,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["super.catch(exception",{"_index":382,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["super.catch(new",{"_index":383,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["support",{"_index":589,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":609,"title":{},"body":{"modules.html":{}}}],["table",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":508,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":281,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["test",{"_index":578,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":581,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":580,"title":{},"body":{"index.html":{}}}],["tests",{"_index":577,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":587,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":403,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":404,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(req.user",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":331,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.catchclientknownrequesterror(exception",{"_index":376,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["this.errorcodesstatusmapping",{"_index":374,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["this.errorcodesstatusmapping[exception.code",{"_index":378,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["this.eventservice.createevent(data",{"_index":251,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.deleteevent(data",{"_index":254,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.event",{"_index":247,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.events",{"_index":249,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.updateevent",{"_index":253,"title":{},"body":{"controllers/EventController.html":{}}}],["this.exceptionshortmessage(exception.message",{"_index":380,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["this.jwtservice.sign(payload",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.event.create",{"_index":288,"title":{},"body":{"injectables/EventService.html":{}}}],["this.prisma.event.delete",{"_index":291,"title":{},"body":{"injectables/EventService.html":{}}}],["this.prisma.event.findmany",{"_index":287,"title":{},"body":{"injectables/EventService.html":{}}}],["this.prisma.event.finduniqueorthrow",{"_index":278,"title":{},"body":{"injectables/EventService.html":{}}}],["this.prisma.event.update",{"_index":290,"title":{},"body":{"injectables/EventService.html":{}}}],["this.prisma.user.create",{"_index":487,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":489,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":484,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.finduniqueorthrow",{"_index":483,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":488,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride('roles",{"_index":420,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.userservice.createuser(data",{"_index":462,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(data",{"_index":464,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuser",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.users",{"_index":460,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.user",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["throttlerguard",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":332,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["touch",{"_index":599,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":388,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["true",{"_index":423,"title":{},"body":{"guards/RoleGuard.html":{}}}],["ttl",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":605,"title":{},"body":{"index.html":{}}}],["type",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":619,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":562,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":329,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":547,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unit",{"_index":576,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":618,"title":{},"body":{"properties.html":{}}}],["updateevent",{"_index":218,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["updateevent(id",{"_index":230,"title":{},"body":{"controllers/EventController.html":{}}}],["updateevent(params",{"_index":275,"title":{},"body":{"injectables/EventService.html":{}}}],["updateeventdto",{"_index":231,"title":{"classes/UpdateEventDto.html":{}},"body":{"controllers/EventController.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":444,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(id",{"_index":452,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(params",{"_index":476,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":433,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["useclass",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":391,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["useguards",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user(userwhereuniqueinput",{"_index":478,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":469,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":455,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto.ts",{"_index":196,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":200,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:18",{"_index":201,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:22",{"_index":202,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":207,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:31",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{}}}],["user.service",{"_index":454,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.password",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":439,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":38,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["usernamefield",{"_index":330,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":457,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users(params",{"_index":481,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":133,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwhereuniqueinput",{"_index":480,"title":{},"body":{"injectables/UserService.html":{}}}],["validate",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":326,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":190,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":348,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":621,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":616,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":571,"title":{},"body":{"index.html":{}}}],["website",{"_index":603,"title":{},"body":{"index.html":{}}}],["world",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":346,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":592,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GlobalModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nGlobalModule\n\nGlobalModule\n\nAppModule -->\n\nGlobalModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EventModule\n                        \n                        \n                            GlobalModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { EventModule } from './event/event.module';\nimport { GlobalModule } from './global/global.module';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    UserModule,\n    EventModule,\n    AuthModule,\n    GlobalModule,\n    ThrottlerModule.forRoot({\n      ttl: 60,\n      limit: 10,\n    }),\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n  ],\n})\nexport class AppModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(Role.ADMIN)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards } from '@nestjs/common';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { AuthService } from './auth.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Role } from '@prisma/client';\nimport { Auth } from './decorators/auth.decorator';\n\n@ApiTags('auth')\n@Controller({ path: 'auth', })\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n  @Auth(Role.ADMIN)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { UserModule } from '../user/user.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '7d' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { compareSync } from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  async validateUser(username: string, password: string): Promise {\n    const user = await this.usersService.user({ email: username });\n    if (compareSync(password, user?.password)) {\n      return user;\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    const payload = { email: user.email, id: user.id, role: user.role };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDto.html":{"url":"classes/CreateEventDto.html","title":"class - CreateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/create-event.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                date\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                place\n                            \n                            \n                                    Optional\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        place\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EnumEventType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: EnumEventType})@IsOptional()@IsEnum(EnumEventType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDate,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { EnumEventType } from '@prisma/client';\n\nexport class CreateEventDto implements Prisma.EventCreateInput {\n  @IsNotEmpty()\n  name: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsDate()\n  date?: Date;\n\n  @IsOptional()\n  place?: string;\n\n  @ApiProperty({ enum: EnumEventType })\n  @IsOptional()\n  @IsEnum(EnumEventType)\n  type?: EnumEventType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstname\n                            \n                            \n                                    Optional\n                                lastname\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(5)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({enum: Role})@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto implements Prisma.UserCreateInput {\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  firstname?: string;\n\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @IsOptional()\n  @ApiProperty({ enum: Role })\n  @IsEnum(Role)\n  role?: Role;\n\n  @MinLength(5)\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventController.html":{"url":"controllers/EventController.html","title":"controller - EventController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEvent\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getEvent\n                            \n                            \n                                    Async\n                                removeEvent\n                            \n                            \n                                    Async\n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEvent(data: CreateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEvent(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEvent(data: Prisma.EventWhereUniqueInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.EventWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEvent(id: string, data: UpdateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { EventService } from './event.service';\nimport { Prisma, Event } from '@prisma/client';\nimport { ApiTags } from '@nestjs/swagger';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { UpdateEventDto } from './dto/update-event.dto';\n\n@ApiTags('event')\n@Controller({ path: 'events' })\nexport class EventController {\n  constructor(private readonly eventService: EventService) {}\n\n  @Get(':id')\n  async getEvent(@Param('id') id: string): Promise {\n    return await this.eventService.event({ id: Number(id) });\n  }\n\n  @Get()\n  async findAll(): Promise {\n    return await this.eventService.events({});\n  }\n\n  @Post()\n  async createEvent(@Body() data: CreateEventDto): Promise {\n    return await this.eventService.createEvent(data);\n  }\n\n  @Patch(':id')\n  async updateEvent(\n    @Param('id') id: string,\n    @Body() data: UpdateEventDto,\n  ): Promise {\n    return this.eventService.updateEvent({\n      where: { id: Number(id) },\n      data,\n    });\n  }\n\n  @Delete(':id')\n  async removeEvent(data: Prisma.EventWhereUniqueInput): Promise {\n    return await this.eventService.deleteEvent(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventModule.html":{"url":"modules/EventModule.html","title":"module - EventModule","body":"\n                   \n\n\n\n\n    Modules\n    EventModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EventModule\n\n\n\ncluster_EventModule_exports\n\n\n\ncluster_EventModule_providers\n\n\n\n\nEventService \n\nEventService \n\n\n\nEventModule\n\nEventModule\n\nEventService  -->\n\nEventModule->EventService \n\n\n\n\n\nEventService\n\nEventService\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/event/event.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventService } from './event.service';\nimport { EventController } from './event.controller';\n\n@Module({\n  imports: [],\n  controllers: [EventController],\n  providers: [EventService],\n  exports: [EventService],\n})\nexport class EventModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventService.html":{"url":"injectables/EventService.html","title":"injectable - EventService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEvent\n                            \n                            \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    Async\n                                event\n                            \n                            \n                                    Async\n                                events\n                            \n                            \n                                    Async\n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/event/event.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEvent(data: Prisma.EventCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.EventCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEvent(where: Prisma.EventWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.EventWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        event\n                        \n                    \n                \n            \n            \n                \n                    \n                    event(eventWhereUniqueInput: Prisma.EventWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventWhereUniqueInput\n                                    \n                                            Prisma.EventWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        events\n                        \n                    \n                \n            \n            \n                \n                    \n                    events(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEvent(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { Event, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class EventService {\n  constructor(private prisma: PrismaService) {}\n\n  async event(\n    eventWhereUniqueInput: Prisma.EventWhereUniqueInput,\n  ): Promise {\n    return this.prisma.event.findUniqueOrThrow({\n      where: eventWhereUniqueInput,\n    });\n  }\n\n  async events(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.event.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createEvent(data: Prisma.EventCreateInput): Promise {\n    return this.prisma.event.create({\n      data,\n    });\n  }\n\n  async updateEvent(params: {\n    where: Prisma.EventWhereUniqueInput;\n    data: Prisma.EventUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.event.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteEvent(where: Prisma.EventWhereUniqueInput): Promise {\n    return this.prisma.event.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GlobalModule.html":{"url":"modules/GlobalModule.html","title":"module - GlobalModule","body":"\n                   \n\n\n\n\n    Modules\n    GlobalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GlobalModule\n\n\n\ncluster_GlobalModule_providers\n\n\n\ncluster_GlobalModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nGlobalModule\n\nGlobalModule\n\nPrismaService  -->\n\nGlobalModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGlobalModule -->\n\nPrismaService->GlobalModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/global/global.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\n\n@Global()\n@Module({\n  imports: [],\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class GlobalModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaClientExceptionFilter.html":{"url":"classes/PrismaClientExceptionFilter.html","title":"class - PrismaClientExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaClientExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma-exception.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                errorCodesStatusMapping\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                catchClientKnownRequestError\n                            \n                            \n                                    Private\n                                exceptionShortMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(applicationRef?: HttpServer, errorCodesStatusMapping: ErrorCodesStatusMapping | null)\n                    \n                \n                        \n                            \n                                Defined in src/prisma-exception.filter.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        applicationRef\n                                                  \n                                                        \n                                                                    HttpServer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        errorCodesStatusMapping\n                                                  \n                                                        \n                                                                        ErrorCodesStatusMapping | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorCodesStatusMapping\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCodesStatusMapping\n\n                    \n                \n                \n                    \n                        Default value : {\n    P2000: HttpStatus.BAD_REQUEST,\n    P2002: HttpStatus.CONFLICT,\n    P2025: HttpStatus.NOT_FOUND,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/prisma-exception.filter.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma-exception.filter.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Prisma.PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        catchClientKnownRequestError\n                        \n                    \n                \n            \n            \n                \n                    \n                    catchClientKnownRequestError(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma-exception.filter.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Prisma.PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        exceptionShortMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    exceptionShortMessage(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma-exception.filter.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  HttpException,\n  HttpServer,\n  HttpStatus,\n} from '@nestjs/common';\nimport { APP_FILTER, BaseExceptionFilter, HttpAdapterHost } from '@nestjs/core';\nimport { Prisma } from '@prisma/client';\n\nexport type ErrorCodesStatusMapping = {\n  [key: string]: number;\n};\n\n@Catch(Prisma?.PrismaClientKnownRequestError)\nexport class PrismaClientExceptionFilter extends BaseExceptionFilter {\n  private errorCodesStatusMapping: ErrorCodesStatusMapping = {\n    P2000: HttpStatus.BAD_REQUEST,\n    P2002: HttpStatus.CONFLICT,\n    P2025: HttpStatus.NOT_FOUND,\n  };\n\n  /**\n   * @param applicationRef\n   * @param errorCodesStatusMapping\n   */\n  constructor(\n    applicationRef?: HttpServer,\n    errorCodesStatusMapping: ErrorCodesStatusMapping | null = null,\n  ) {\n    super(applicationRef);\n\n    if (errorCodesStatusMapping) {\n      this.errorCodesStatusMapping = Object.assign(\n        this.errorCodesStatusMapping,\n        errorCodesStatusMapping,\n      );\n    }\n  }\n\n  /**\n   * @param exception\n   * @param host\n   * @returns\n   */\n  catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n    return this.catchClientKnownRequestError(exception, host);\n  }\n\n  private catchClientKnownRequestError(\n    exception: Prisma.PrismaClientKnownRequestError,\n    host: ArgumentsHost,\n  ) {\n    const statusCode = this.errorCodesStatusMapping[exception.code];\n    const message =\n      `[${exception.code}]: ` + this.exceptionShortMessage(exception.message);\n\n    if (!Object.keys(this.errorCodesStatusMapping).includes(exception.code)) {\n      return super.catch(exception, host);\n    }\n\n    super.catch(new HttpException({ statusCode, message }, statusCode), host);\n  }\n\n  private exceptionShortMessage(message: string): string {\n    const shortMessage = message.substring(message.indexOf('→'));\n    return shortMessage\n      .substring(shortMessage.indexOf('\\n'))\n      .replace(/\\n/g, '')\n      .trim();\n  }\n}\n\nexport function providePrismaClientExceptionFilter(\n  errorCodesStatusMapping?: ErrorCodesStatusMapping,\n) {\n  return {\n    provide: APP_FILTER,\n    useFactory: ({ httpAdapter }: HttpAdapterHost) => {\n      return new PrismaClientExceptionFilter(\n        httpAdapter,\n        errorCodesStatusMapping,\n      );\n    },\n    inject: [HttpAdapterHost],\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/role.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/role.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.role === role);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEventDto.html":{"url":"classes/UpdateEventDto.html","title":"class - UpdateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/update-event.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                date\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                place\n                            \n                            \n                                    Optional\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/update-event.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/update-event.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/update-event.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        place\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/update-event.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EnumEventType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: EnumEventType})@IsEnum(EnumEventType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/update-event.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EnumEventType, Prisma } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDate,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class UpdateEventDto implements Prisma.EventUpdateInput {\n  @IsNotEmpty()\n  name: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsDate()\n  date?: Date;\n\n  @IsOptional()\n  place?: string;\n\n  @ApiProperty({ enum: EnumEventType })\n  @IsEnum(EnumEventType)\n  type?: EnumEventType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                firstname\n                            \n                            \n                                    Optional\n                                lastname\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Prisma.StringFieldUpdateOperationsInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@MinLength(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({enum: Role})@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, Role } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsEnum,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\n\nexport class UpdateUserDto implements Prisma.UserUpdateInput {\n  @IsOptional()\n  @IsEmail()\n  email?: string | Prisma.StringFieldUpdateOperationsInput;\n\n  @IsOptional()\n  @IsString()\n  firstname?: string;\n\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @IsOptional()\n  @ApiProperty({ enum: Role })\n  @IsEnum(Role)\n  role?: Role;\n\n  @IsOptional()\n  @MinLength(5)\n  password?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUser(data: Prisma.UserWhereUniqueInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: string, data: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User, Prisma } from '@prisma/client';\nimport { ApiTags } from '@nestjs/swagger';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@ApiTags('user')\n@Controller({ path: 'users' })\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get(':id')\n  async getUser(@Param('id') id: string): Promise {\n    return await this.userService.user({ id: Number(id) });\n  }\n\n  @Get()\n  async findAll(): Promise {\n    return await this.userService.users({});\n  }\n\n  @Post()\n  async createUser(@Body() data: CreateUserDto): Promise {\n    return await this.userService.createUser(data);\n  }\n\n  @Patch(':id')\n  async updateUser(\n    @Param('id') id: string,\n    @Body() data: UpdateUserDto,\n  ): Promise {\n    return this.userService.updateUser({\n      where: { id: Number(id) },\n      data,\n    });\n  }\n\n  @Delete(':id')\n  async removeUser(data: Prisma.UserWhereUniqueInput): Promise {\n    return await this.userService.deleteUser(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\n\n@Module({\n  imports: [],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                user\n                            \n                            \n                                    Async\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: Prisma.UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        user\n                        \n                    \n                \n            \n            \n                \n                    \n                    user(userWhereUniqueInput: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userWhereUniqueInput\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        users\n                        \n                    \n                \n            \n            \n                \n                    \n                    users(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { User, Prisma } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  async user(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise {\n    return this.prisma.user.findUniqueOrThrow({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async users(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createUser(data: Prisma.UserCreateInput): Promise {\n    data.password = await bcrypt.hash(data.password, 10);\n    return this.prisma.user.create({\n      data,\n    });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    if (data.password) {\n      data.password = await bcrypt.hash(data.password as string, 10);\n    }\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prisma.user.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            fakerUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            function\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/event/dto/create-event.dto.ts\n            \n            class\n            CreateEventDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/event/dto/update-event.dto.ts\n            \n            class\n            UpdateEventDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/event/event.controller.ts\n            \n            controller\n            EventController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/event/event.service.ts\n            \n            injectable\n            EventService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma-exception.filter.ts\n            \n            class\n            PrismaClientExceptionFilter\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/prisma-exception.filter.ts\n            \n            function\n            providePrismaClientExceptionFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/mapped-types : ^1.2.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.3.0\n        \n            @nestjs/throttler : ^4.0.0\n        \n            @prisma/client : ^4.11.0\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            compression : ^1.7.4\n        \n            dotenv : ^16.0.3\n        \n            helmet : ^7.0.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                        \n                            providePrismaClientExceptionFilter   (src/.../prisma-exception.filter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n            \n                \nAuth(...roles: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n    src/prisma-exception.filter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        providePrismaClientExceptionFilter\n                        \n                    \n                \n            \n            \n                \nprovidePrismaClientExceptionFilter(errorCodesStatusMapping?: ErrorCodesStatusMapping)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorCodesStatusMapping\n                                    \n                                                ErrorCodesStatusMapping\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GlobalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EventModule\n\n\n\ncluster_EventModule_exports\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_GlobalModule\n\n\n\ncluster_GlobalModule_exports\n\n\n\ncluster_GlobalModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nEventService \n\nEventService \n\nEventService  -->\n\nEventModule->EventService \n\n\n\n\n\nGlobalModule\n\nGlobalModule\n\nAppModule -->\n\nGlobalModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nGlobalModule->PrismaService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nEventService\n\nEventService\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGlobalModule -->\n\nPrismaService->GlobalModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ErrorCodesStatusMapping   (src/.../prisma-exception.filter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/prisma-exception.filter.ts\n    \n    \n        \n            \n                \n                    \n                    ErrorCodesStatusMapping\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            fakerUser   (prisma/.../seed.ts)\n                        \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fakerUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): any => {\n  const firstname = faker.name.firstName();\n  const lastname = faker.name.lastName();\n  const email = faker.internet.email(firstname, lastname);\n  const password = bcrypt.hashSync('password', 10);\n  return { firstname, lastname, email, password };\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
